// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ORGANIZER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  passwordHash  String
  role          Role
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  organizedEvents Event[]  @relation("OrganizerEvents")
  orders          Order[]
  payouts         Payout[] @relation("OrganizerPayouts")
}

model Event {
  id          String   @id @default(cuid())
  organizerId String
  name        String
  description String
  location    String
  city        String
  category    String
  dateTime    DateTime
  bannerUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false) 


  organizer   User     @relation("OrganizerEvents", fields: [organizerId], references: [id])
  ticketTypes TicketType[]
  orders      Order[]
}

model TicketType {
  id             String  @id @default(cuid())
  eventId        String
  name           String
  price          Decimal @db.Decimal(10, 2)
  quantityTotal  Int
  quantitySold   Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  event          Event   @relation(fields: [eventId], references: [id])
  orderItems     OrderItem[]
}

model Order {
  id              String       @id @default(cuid())
  customerId      String
  eventId         String
  status          OrderStatus  @default(PENDING)
  totalAmount     Decimal      @db.Decimal(10, 2)
  feesAmount      Decimal      @db.Decimal(10, 2)
  netAmount       Decimal      @db.Decimal(10, 2)
  paymentProvider String?
  paymentRef      String?
  createdAt       DateTime     @default(now())

  customer       User         @relation(fields: [customerId], references: [id])
  event          Event        @relation(fields: [eventId], references: [id])
  items          OrderItem[]
}

model OrderItem {
  id             String    @id @default(cuid())
  orderId        String
  ticketTypeId   String
  unitPrice      Decimal   @db.Decimal(10, 2)
  quantity       Int
  feePerTicket   Decimal   @db.Decimal(10, 2)
  netAmount      Decimal   @db.Decimal(10, 2)

  order          Order     @relation(fields: [orderId], references: [id])
  ticketType     TicketType @relation(fields: [ticketTypeId], references: [id])
  tickets        Ticket[]
}

model Ticket {
  id           String   @id @default(cuid())
  orderItemId  String
  code         String   @unique
  qrCodeData   String
  usedAt       DateTime?
  createdAt    DateTime @default(now())

  orderItem    OrderItem @relation(fields: [orderItemId], references: [id])
}

model Payout {
  id            String       @id @default(cuid())
  organizerId   String
  amount        Decimal      @db.Decimal(10, 2)
  status        PayoutStatus @default(PENDING)
  periodStart   DateTime
  periodEnd     DateTime
  createdAt     DateTime     @default(now())

  organizer     User         @relation("OrganizerPayouts", fields: [organizerId], references: [id])
}
